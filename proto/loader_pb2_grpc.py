# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import block_pb2 as block__pb2
import loader_pb2 as loader__pb2


class LoaderStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.retrieveBlocks = channel.unary_stream(
        '/iroha.network.proto.Loader/retrieveBlocks',
        request_serializer=loader__pb2.BlocksRequest.SerializeToString,
        response_deserializer=block__pb2.Block.FromString,
        )
    self.retrieveBlock = channel.unary_unary(
        '/iroha.network.proto.Loader/retrieveBlock',
        request_serializer=loader__pb2.BlockRequest.SerializeToString,
        response_deserializer=block__pb2.Block.FromString,
        )


class LoaderServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def retrieveBlocks(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def retrieveBlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoaderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'retrieveBlocks': grpc.unary_stream_rpc_method_handler(
          servicer.retrieveBlocks,
          request_deserializer=loader__pb2.BlocksRequest.FromString,
          response_serializer=block__pb2.Block.SerializeToString,
      ),
      'retrieveBlock': grpc.unary_unary_rpc_method_handler(
          servicer.retrieveBlock,
          request_deserializer=loader__pb2.BlockRequest.FromString,
          response_serializer=block__pb2.Block.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'iroha.network.proto.Loader', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
